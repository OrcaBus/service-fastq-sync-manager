{
  "Comment": "A description of my state machine",
  "StartAt": "Save vars",
  "States": {
    "Save vars": {
      "Type": "Pass",
      "Next": "Get fastq list row and remaining requirements",
      "Assign": {
        "fastqId": "{% $states.input.fastqId %}",
        "requirements": "{% $states.input.requirements %}"
      }
    },
    "Get fastq list row and remaining requirements": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__get_fastq_and_remaining_requirements_lambda_function_arn__}",
        "Payload": {
          "fastqId": "{% $fastqId %}",
          "requirements": "{% $requirements %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Has readset",
      "Assign": {
        "fastqObj": "{% $states.result.Payload.fastqObj %}",
        "satisfiedRequirements": "{% $states.result.Payload.satisfiedRequirements %}",
        "unsatisfiedRequirements": "{% $states.result.Payload.unsatisfiedRequirements %}"
      }
    },
    "Has readset": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "fastq needs unarchiving",
          "Condition": "{% $fastqObj.readSet ? true : false %}",
          "Comment": "Run jobs"
        }
      ],
      "Default": "No readset to add jobs to"
    },
    "No readset to add jobs to": {
      "Type": "Pass",
      "End": true
    },
    "fastq needs unarchiving": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Launch unarchiving",
          "Condition": "{% \"hasActiveReadSet\" in $unsatisfiedRequirements %}",
          "Comment": "Is Active Readset in unsatisfied requirements"
        }
      ],
      "Default": "Launch requirements"
    },
    "Launch requirements": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Needs QC",
          "States": {
            "Needs QC": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "If read count available first",
                  "Condition": "{% \"hasQc\" in $unsatisfiedRequirements %}"
                }
              ],
              "Default": "Pass"
            },
            "If read count available first": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Launch QC",
                  "Condition": "{% /* Has Read Count */\n(\n  $fastqObj.readCount ? true : false and\n  $fastqObj.baseCountEst ? true : false\n) and \n/* Not already launching read count */\n$not(\"hasReadCountInformation\" in $unsatisfiedRequirements) %}",
                  "Comment": "Ensure readcount exists before getting qc stats"
                }
              ],
              "Default": "Pass (6)"
            },
            "Launch QC": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__launch_requirement_job_lambda_function_arn__}",
                "Payload": {
                  "fastqId": "{% $fastqId %}",
                  "requirementType": "hasQc"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            },
            "Pass (6)": {
              "Type": "Pass",
              "End": true
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "Needs Fingerprint",
          "States": {
            "Needs Fingerprint": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Launch Fingerprint",
                  "Condition": "{% \"hasFingerprint\" in $unsatisfiedRequirements %}"
                }
              ],
              "Default": "Pass (2)"
            },
            "Launch Fingerprint": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__launch_requirement_job_lambda_function_arn__}",
                "Payload": {
                  "fastqId": "{% $fastqId %}",
                  "requirementType": "hasFingerprint"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            },
            "Pass (2)": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "Needs Compression Information",
          "States": {
            "Needs Compression Information": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Check if readcount is available first",
                  "Condition": "{% \"hasFileCompressionInformation\" in $unsatisfiedRequirements %}"
                }
              ],
              "Default": "Pass (1)"
            },
            "Check if readcount is available first": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Launch Compression Information",
                  "Condition": "{% /* Has Read Count */\n(\n  $fastqObj.readCount ? true : false and\n  $fastqObj.baseCountEst ? true : false\n) and \n/* Not already launching read count */\n$not(\"hasReadCountInformation\" in $unsatisfiedRequirements) %}",
                  "Comment": "Has readcount info and readcount info not in requirements"
                }
              ],
              "Default": "Pass (5)"
            },
            "Launch Compression Information": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__launch_requirement_job_lambda_function_arn__}",
                "Payload": {
                  "fastqId": "{% $fastqId %}",
                  "requirementType": "hasFileCompressionInformation"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            },
            "Pass (5)": {
              "Type": "Pass",
              "End": true
            },
            "Pass (1)": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "Needs ReadCount Information",
          "States": {
            "Needs ReadCount Information": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Launch Read Count Information",
                  "Condition": "{% \"hasReadCountInformation\" in $unsatisfiedRequirements %}"
                }
              ],
              "Default": "Pass (3)"
            },
            "Launch Read Count Information": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": "{% $states.result.Payload %}",
              "Arguments": {
                "FunctionName": "${__launch_requirement_job_lambda_function_arn__}",
                "Payload": {
                  "fastqId": "{% $fastqId %}",
                  "requirementType": "hasReadCountInformation"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "End": true
            },
            "Pass (3)": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "End": true
    },
    "Launch unarchiving": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${__launch_requirement_job_lambda_function_arn__}",
        "Payload": {
          "fastqId": "{% $fastqId %}",
          "requirementType": "hasActiveReadSet"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
